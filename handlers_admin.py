import asyncio
import datetime

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from sqlalchemy import select, delete

from bot import bot
from config import ADMIN_IDS, RAZRAB
from db.models import Manager, Security, Resident, Contractor, RegistrationRequest, \
    ContractorRegistrationRequest, AsyncSessionLocal, ResidentContractorRequest, PermanentPass, TemporaryPass, Appeal

router = Router()
router.message.filter(F.from_user.id.in_(ADMIN_IDS))  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –∫–æ–ª–±–µ–∫–æ–≤


class AddUserStates(StatesGroup):
    WAITING_PHONE = State()
    CHOOSE_TYPE = State()


class RegistrationRequestStates(StatesGroup):
    AWAIT_REJECT_RESIDENT_COMMENT = State()
    AWAIT_EDIT_COMPANY = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    AWAIT_EDIT_POSITION = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    AWAIT_EDIT_CONTRACTOR_FIO = State()
    EDITING_CONTRACTOR_REQUEST = State()
    VIEWING_CONTRACTOR_REQUEST = State()
    AWAIT_REJECT_CONTRACTOR_COMMENT = State()
    VIEWING_REQUEST = State()
    EDITING_REQUEST = State()
    AWAIT_EDIT_FIO = State()
    AWAIT_EDIT_PLOT = State()
    AWAIT_EDIT_PHOTO = State()
    AWAIT_REJECT_COMMENT = State()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_menu()
    )


admin_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
    is_persistent=True
)


def is_valid_phone(phone: str) -> bool:
    return len(phone) == 11 and phone.isdigit() and phone[0] == '8'


def edit_keyboard_contractor():
    return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–§–ò–û", callback_data="edit_contractorfio"),
                InlineKeyboardButton(text="–ö–æ–º–ø–∞–Ω–∏—è", callback_data="edit_contractorcompany"),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            ],
            [
                InlineKeyboardButton(text="–î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data="edit_contractorposition"),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_finishcontractor")
            ]
        ])


def get_registration_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="registration_requests")],
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="contractor_requests")],
        [InlineKeyboardButton(text="–ó–∞—è–≤–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="resident_contractor_requests")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
def get_admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë•–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="user_management")],
        [InlineKeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration_menu")],
        [InlineKeyboardButton(text="üö™ –ü—Ä–æ–ø—É—Å–∫–∞", callback_data="passes_menu")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—Å–∫–∞", callback_data="search_pass")],
        [InlineKeyboardButton(text="üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu")],
        [InlineKeyboardButton(text="üì® –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –£–ö", callback_data="appeals_management")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ])


def edit_keyboard_resident():
    return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–§–ò–û", callback_data="edit_fio"),
                InlineKeyboardButton(text="–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞", callback_data="edit_plot")
            ],
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_finish")
            ]
        ])


def get_back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])


def get_admin_menu_with_back():
    buttons = get_admin_menu().inline_keyboard
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_user_management_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", callback_data="managers_manage")],
        [InlineKeyboardButton(text="–°–ë", callback_data="security_manage")],
        [InlineKeyboardButton(text="–†–µ–∑–∏–¥–µ–Ω—Ç—ã", callback_data="residents_manage")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ä—è–¥—á–∏–∫–∏", callback_data="contractors_manage")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])


def get_add_menu(user_type: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å {user_type}", callback_data=f"add_{user_type}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])


@router.message(CommandStart())
async def process_start_admin(message: Message):
    try:
        await message.answer(
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            reply_markup=admin_reply_keyboard
        )
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.in_({"user_management", "back_to_manage"}))
async def user_management(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=get_user_management_menu()
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.endswith("manage"))
async def manage_category(callback: CallbackQuery, state: FSMContext):
    try:
        user_type = callback.data.split("_")[0]
        await state.update_data(user_type=user_type)

        # –î–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
        if user_type == 'residents':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="list_residents")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
        # –î–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
        elif user_type == 'contractors':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="list_contractors")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
        elif user_type == 'managers':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
            # –î–ª—è –°–ë
        elif user_type == 'security':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –°–ë", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –°–ë", callback_data="list_security")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
        else:
            return

        await callback.message.edit_text(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {user_type}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("add_"))
async def start_add_user(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state(AddUserStates.WAITING_PHONE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, AddUserStates.WAITING_PHONE)
async def process_phone(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_type = data['user_type']
        phone = message.text
        if not is_valid_phone(phone):
            await message.answer('–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑!')
            return

        async with AsyncSessionLocal() as session:
            try:
                if user_type == 'managers':
                    new_user = Manager(phone=phone)
                elif user_type == 'security':
                    new_user = Security(phone=phone)
                elif user_type == 'residents':
                    new_user = Resident(phone=phone)
                elif user_type == 'contractors':
                    new_user = Contractor(phone=phone)

                session.add(new_user)
                await session.commit()
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {user_type}!")
                if user_type == 'residents':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="list_residents")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                # –î–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
                elif user_type == 'contractors':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="list_contractors")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                elif user_type == 'managers':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                    # –î–ª—è –°–ë
                elif user_type == 'security':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –°–ë", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –°–ë", callback_data="list_security")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                else:
                    return

                await message.answer(
                    text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {user_type}:",
                    reply_markup=keyboard
                )

            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                await session.rollback()

        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "registration_menu")
async def show_registration_menu(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_registration_menu()
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
@router.callback_query(F.data == "registration_requests")
async def show_pending_requests(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(RegistrationRequest)
                .filter(RegistrationRequest.status == 'pending')
            )
            requests = result.scalars().all()

            if not requests:
                await callback.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")
                return

            buttons = [
                [InlineKeyboardButton(
                    text=f"–†–µ–∑–∏–¥–µ–Ω—Ç - {req.resident_id}",
                    callback_data=f"view_request_{req.id}"
                )]
                for req in requests
            ]

            await callback.message.edit_text(
                "–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *buttons,
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="registration_menu")]]
                )
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—è–≤–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
@router.callback_query(F.data == "contractor_requests")
async def show_contractor_requests(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(ContractorRegistrationRequest)
                .filter(ContractorRegistrationRequest.status == 'pending')
            )
            requests = result.scalars().all()

            if not requests:
                await callback.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤")
                return

            buttons = [
                [InlineKeyboardButton(
                    text=f"–ü–æ–¥—Ä—è–¥—á–∏–∫ - {req.fio}",
                    callback_data=f"view_contractor_request_{req.id}"
                )] for req in requests
            ]

            await callback.message.edit_text(
                "–ó–∞—è–≤–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *buttons,
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="registration_menu")]]
                )
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("view_request_"))
async def view_request_details(callback: CallbackQuery, state: FSMContext):
    try:
        request_id = int(callback.data.split("_")[-1])

        async with AsyncSessionLocal() as session:
            request = await session.get(RegistrationRequest, request_id)

            await state.update_data(current_request_id=request_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏
            caption = (
                f"–§–ò–û: {request.fio}\n"
                f"–£—á–∞—Å—Ç–æ–∫: {request.plot_number}\n"
                f"TG ID: {request.tg_id}\n"
                f"Username: @{request.username}"
            )

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_request")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_request")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_request")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="registration_requests")]
            ])

            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=request.photo_id,
                caption=caption,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("view_contractor_request_"))
async def view_contractor_request(callback: CallbackQuery, state: FSMContext):
    try:
        request_id = int(callback.data.split("_")[-1])
        await state.update_data(current_contractor_request_id=request_id)

        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)
            text = (
                f"–§–ò–û: {request.fio}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {request.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {request.position}\n"
                f"TG: @{request.username}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {request.affiliation}\n"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_contractor_request")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_contractor_request")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_contractor_request")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contractor_requests")]
            ])

            await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "approve_request")
async def approve_request(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(RegistrationRequest, request_id)
            resident = await session.get(Resident, request.resident_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
            resident.fio = request.fio
            resident.plot_number = request.plot_number
            resident.photo_id = request.photo_id
            resident.tg_id = request.tg_id
            resident.username = request.username
            resident.time_registration = datetime.datetime.now()
            resident.status = True

            request.status = 'approved'
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                chat_id=request.tg_id,
                text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞! –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=admin_reply_keyboard
            )

            await callback.message.edit_caption(caption="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
            await callback.message.answer(
                text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
                reply_markup=get_registration_menu()
            )
            await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data == "approve_contractor_request")
async def approve_contractor_request(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_contractor_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)
            contractor = await session.get(Contractor, request.contractor_id)

            contractor.fio = request.fio
            contractor.company = request.company
            contractor.position = request.position
            contractor.affiliation = request.affiliation
            contractor.tg_id = request.tg_id
            contractor.username = request.username
            contractor.status = True
            contractor.time_registration = datetime.datetime.now()

            request.status = 'approved'
            await session.commit()

            await bot.send_message(
                request.tg_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞! –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=admin_reply_keyboard
            )

        await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
        await callback.message.answer(
            text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_registration_menu()
        )
        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "edit_request")
async def start_editing(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_reply_markup(reply_markup=edit_keyboard_resident())
        await state.set_state(RegistrationRequestStates.EDITING_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == "edit_contractor_request")
async def start_contractor_editing(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_reply_markup(reply_markup=edit_keyboard_contractor())
        await state.set_state(RegistrationRequestStates.EDITING_CONTRACTOR_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "edit_finish", RegistrationRequestStates.EDITING_REQUEST)
async def finish_editing(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(RegistrationRequest, request_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            caption = (
                f"–§–ò–û: {request.fio}\n"
                f"–£—á–∞—Å—Ç–æ–∫: {request.plot_number}\n"
                f"TG ID: {request.tg_id}\n"
                f"Username: @{request.username}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_request")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_request")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_request")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="requests")]
            ])

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=request.photo_id,
                caption=caption,
                reply_markup=keyboard
            )

        await state.set_state(RegistrationRequestStates.VIEWING_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "edit_finishcontractor", RegistrationRequestStates.EDITING_CONTRACTOR_REQUEST)
async def finish_editing(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_contractor_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = (
                f"–§–ò–û: {request.fio}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {request.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {request.position}\n"
                f"TG: @{request.username}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {request.affiliation}\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_contractor_request")],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_contractor_request")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_contractor_request")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contractor_requests")]
            ])

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text=text,
                reply_markup=keyboard
            )

        await state.set_state(RegistrationRequestStates.VIEWING_CONTRACTOR_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("edit_"), RegistrationRequestStates.EDITING_CONTRACTOR_REQUEST)
async def handle_edit_actions(callback: CallbackQuery, state: FSMContext):
    try:
        action = callback.data.split("_")[-1]

        if action == "contractorfio":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
            await state.set_state(RegistrationRequestStates.AWAIT_EDIT_CONTRACTOR_FIO)
        elif action == "contractorcompany":  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
            await state.set_state(RegistrationRequestStates.AWAIT_EDIT_COMPANY)
        elif action == "contractorposition":  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
            await state.set_state(RegistrationRequestStates.AWAIT_EDIT_POSITION)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("edit_"), RegistrationRequestStates.EDITING_REQUEST)
async def handle_edit_actions(callback: CallbackQuery, state: FSMContext):
    try:
        action = callback.data.split("_")[-1]

        if action == "fio":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
            await state.set_state(RegistrationRequestStates.AWAIT_EDIT_FIO)
        elif action == "plot":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞:")
            await state.set_state(RegistrationRequestStates.AWAIT_EDIT_PLOT)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û
@router.message(F.text, RegistrationRequestStates.AWAIT_EDIT_FIO)
async def update_fio(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_request_id']
        async with AsyncSessionLocal() as session:
            request = await session.get(RegistrationRequest, request_id)
            request.fio = message.text
            await session.commit()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏
            caption = (
                f"–§–ò–û: {message.text}\n"
                f"–£—á–∞—Å—Ç–æ–∫: {request.plot_number}\n"
                f"TG ID: {request.tg_id}\n"
                f"Username: @{request.username}"
            )
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=request.photo_id,
                caption=caption,
                reply_markup=edit_keyboard_resident()
            )
        await state.set_state(RegistrationRequestStates.EDITING_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, RegistrationRequestStates.AWAIT_EDIT_CONTRACTOR_FIO)
async def update_fio(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_contractor_request_id']
        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)
            request.fio = message.text
            await session.commit()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏
            text = (
                f"–§–ò–û: {message.text}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {request.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {request.position}\n"
                f"TG: @{request.username}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {request.affiliation}\n"
            )

            await bot.send_message(
                chat_id=message.from_user.id,
                text=text,
                reply_markup=edit_keyboard_contractor()
            )
        await state.set_state(RegistrationRequestStates.EDITING_CONTRACTOR_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, RegistrationRequestStates.AWAIT_EDIT_COMPANY)
async def update_company(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_contractor_request_id']
        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)
            request.company = message.text
            await session.commit()
            text = (
                f"–§–ò–û: {request.fio}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {message.text}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {request.position}\n"
                f"TG: @{request.username}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {request.affiliation}\n"
            )

            await bot.send_message(
                chat_id=message.from_user.id,
                text=text,
                reply_markup=edit_keyboard_contractor()
            )
        await state.set_state(RegistrationRequestStates.EDITING_CONTRACTOR_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, RegistrationRequestStates.AWAIT_EDIT_POSITION)
async def update_position(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_contractor_request_id']
        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)
            request.position = message.text
            await session.commit()
            text = (
                f"–§–ò–û: {request.fio}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {request.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {message.text}\n"
                f"TG: @{request.username}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {request.affiliation}\n"
            )

            await bot.send_message(
                chat_id=message.from_user.id,
                text=text,
                reply_markup=edit_keyboard_contractor()
            )
        await state.set_state(RegistrationRequestStates.EDITING_CONTRACTOR_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞
@router.message(F.text, RegistrationRequestStates.AWAIT_EDIT_PLOT)
async def update_fio(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(RegistrationRequest, request_id)
            request.plot_number = message.text
            await session.commit()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–º–∏
            caption = (
                f"–§–ò–û: {request.fio}\n"
                f"–£—á–∞—Å—Ç–æ–∫: {message.text}\n"
                f"TG ID: {request.tg_id}\n"
                f"Username: @{request.username}"
            )

            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=request.photo_id,
                caption=caption,
                reply_markup=edit_keyboard_resident()
            )
        await state.set_state(RegistrationRequestStates.EDITING_REQUEST)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "reject_request")
async def start_reject(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        await state.set_state(RegistrationRequestStates.AWAIT_REJECT_CONTRACTOR_COMMENT)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, RegistrationRequestStates.AWAIT_REJECT_CONTRACTOR_COMMENT)
async def reject_request(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_contractor_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(ContractorRegistrationRequest, request_id)
            request.status = 'rejected'
            request.admin_comment = message.text
            await session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(
                chat_id=request.tg_id,
                text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]))

        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        await message.answer(
            text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_registration_menu()
        )
        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "reject_contractor_request")
async def start_reject(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        await state.set_state(RegistrationRequestStates.AWAIT_REJECT_COMMENT)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, RegistrationRequestStates.AWAIT_REJECT_COMMENT)
async def reject_request(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(RegistrationRequest, request_id)
            request.status = 'rejected'
            request.admin_comment = message.text
            await session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.send_message(
                chat_id=request.tg_id,
                text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]))

        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        await message.answer(
            text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_registration_menu()
        )
        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "resident_contractor_requests")
async def show_resident_contractor_requests(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(ResidentContractorRequest)
                .filter(ResidentContractorRequest.status == 'pending')
            )
            requests = result.scalars().all()

            buttons = [
                [InlineKeyboardButton(
                    text=f"–ü–æ–¥—Ä—è–¥—á–∏–∫ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ #{req.id}",
                    callback_data=f"view_resident_request_{req.id}"
                )] for req in requests
            ]

            await callback.message.edit_text(
                "–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    *buttons,
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="registration_menu")]]
                )
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_resident_request_"))
async def view_resident_request(callback: CallbackQuery, state: FSMContext):
    try:
        request_id = int(callback.data.split("_")[-1])
        await state.update_data(current_resident_request_id=request_id)

        async with AsyncSessionLocal() as session:
            request = await session.get(ResidentContractorRequest, request_id)
            resident = await session.get(Resident, request.resident_id)

            text = (
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.phone}\n"
                f"üèó –í–∏–¥—ã —Ä–∞–±–æ—Ç: {request.work_types}\n"
                f"üë§ –†–µ–∑–∏–¥–µ–Ω—Ç: {resident.fio} (ID: {resident.id})"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data="approve_resident_request")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_resident_request")]
            ])

            await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "approve_resident_request")
async def approve_resident_request(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_resident_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(ResidentContractorRequest, request_id)
            resident = await session.get(Resident, request.resident_id)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
            new_contractor = Contractor(
                phone=request.phone,
                work_types=request.work_types,
                affiliation=f"{resident.id}_{resident.fio}",
                status=False  # –¢—Ä–µ–±—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            )
            session.add(new_contractor)
            await session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            request.status = 'approved'
            await session.commit()

        await bot.send_message(
            chat_id=resident.tg_id,
            text=f"üéâ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –í–∞—à–µ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ ({request.phone}) –æ–¥–æ–±—Ä–µ–Ω–∞! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ "
                 "–ø–æ–¥—Ä—è–¥—á–∏–∫—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç, –ø–æ–¥—Ä—è–¥—á–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –¥–ª—è –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=admin_reply_keyboard
        )
        await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        await callback.message.answer(
            text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_registration_menu()
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "reject_resident_request")
async def reject_resident_request(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        await state.set_state(RegistrationRequestStates.AWAIT_REJECT_RESIDENT_COMMENT)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, RegistrationRequestStates.AWAIT_REJECT_RESIDENT_COMMENT)
async def process_reject_comment(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data['current_resident_request_id']

        async with AsyncSessionLocal() as session:
            request = await session.get(ResidentContractorRequest, request_id)
            resident = await session.get(Resident, request.resident_id)
            request.status = 'rejected'
            request.admin_comment = message.text
            await session.commit()

        await bot.send_message(
            chat_id=resident.tg_id,
            text=f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –í–∞—à–µ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ ({request.phone}) –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n–ü—Ä–∏—á–∏–Ω–∞: {message.text}",
            reply_markup=admin_reply_keyboard
        )
        await message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        await message.answer(
            text="–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=get_registration_menu()
        )
        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_residents")
async def show_residents_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º True
            result = await session.execute(
                select(Resident).where(Resident.status == True))
            residents = result.scalars().all()

            if not residents:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤")
                return

            buttons = []
            for resident in residents:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: ID –∏ –§–ò–û
                button_text = f"{resident.id}_{resident.fio}"
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_resident_{resident.id}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="residents_manage"
            )])
            try:
                await callback.message.edit_text(
                    "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
            except:
                await callback.message.answer(text="–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:",
                                              reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_resident_"))
async def view_resident_details(callback: CallbackQuery):
    try:
        resident_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            resident = await session.get(Resident, resident_id)
            if not resident:
                await callback.answer("–†–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"ID: {resident.id}\n"
                f"–§–ò–û: {resident.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {resident.phone}\n"
                f"–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: {resident.plot_number}\n"
                f"TG: @{resident.username}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {resident.time_registration}"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_resident_{resident_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_residents")]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if resident.photo_id:
                await bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=resident.photo_id,
                    caption=text,
                    reply_markup=keyboard
                )
            else:
                await callback.message.answer(
                    text=text,
                    reply_markup=keyboard
                )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

@router.callback_query(F.data == "list_contractors")
async def show_contractors_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º True
            result = await session.execute(
                select(Contractor).where(Contractor.status == True))
            contractors = result.scalars().all()

            if not contractors:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤")
                return

            buttons = []
            for contractor in contractors:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: ID –∏ –§–ò–û
                button_text = f"{contractor.id}_{contractor.fio}"
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_contractor_{contractor.id}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="contractors_manage"
            )])

            try:
                await callback.message.edit_text(
                    "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
            except:
                await callback.message.answer(
                    text="–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_contractor_"))
async def view_contractor_details(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            contractor = await session.get(Contractor, contractor_id)
            if not contractor:
                await callback.answer("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"ID: {contractor.id}\n"
                f"–§–ò–û: {contractor.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {contractor.phone}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {contractor.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {contractor.position}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {contractor.affiliation}\n"
                f"TG: @{contractor.username}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {contractor.time_registration}"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_contractor_{contractor_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_contractors")]
            ])

            await callback.message.answer(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("delete_resident_"))
async def confirm_delete_resident(callback: CallbackQuery):
    try:
        resident_id = int(callback.data.split("_")[-1])
        await callback.message.answer(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_yes_{resident_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_delete_no_{resident_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_no_"))
async def cancel_delete(callback: CallbackQuery):
    try:
        resident_id = int(callback.data.split("_")[-1])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
        await view_resident_details(callback)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_yes_"))
async def execute_delete(callback: CallbackQuery, state: FSMContext):
    try:
        resident_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            stmt1 = delete(RegistrationRequest).where(RegistrationRequest.resident_id == resident_id)
            stmt2 = delete(ResidentContractorRequest).where(ResidentContractorRequest.resident_id == resident_id)
            stmt3 = delete(PermanentPass).where(PermanentPass.resident_id == resident_id)
            stmt4 = delete(TemporaryPass).where(TemporaryPass.resident_id == resident_id)
            stmt5 = delete(Appeal).where(Appeal.resident_id == resident_id)
            await session.execute(stmt1)
            await session.execute(stmt2)
            await session.execute(stmt3)
            await session.execute(stmt4)
            await session.execute(stmt5)

            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
            stmt6 = delete(Resident).where(Resident.id == resident_id)
            await session.execute(stmt6)
            await session.commit()

        await callback.message.answer("‚úÖ –†–µ–∑–∏–¥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data=f"add_residents")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="list_residents")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])
        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ residents:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("delete_contractor_"))
async def confirm_delete_contractor(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        await callback.message.answer(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_del_cont_yes_{contractor_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_del_cont_no_{contractor_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("confirm_del_cont_no_"))
async def cancel_delete_contractor(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
        await view_contractor_details(callback)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("confirm_del_cont_yes_"))
async def execute_delete_contractor(callback: CallbackQuery, state: FSMContext):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            stmt1 = delete(ContractorRegistrationRequest).where(
                ContractorRegistrationRequest.contractor_id == contractor_id
            )
            stmt2 = delete(TemporaryPass).where(
                TemporaryPass.contractor_id == contractor_id
            )
            await session.execute(stmt1)
            await session.execute(stmt2)

            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
            stmt3 = delete(Contractor).where(Contractor.id == contractor_id)
            await session.execute(stmt3)
            await session.commit()

        await callback.message.answer("‚úÖ –ü–æ–¥—Ä—è–¥—á–∏–∫ —É–¥–∞–ª–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data=f"add_contractors")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="list_contractors")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])
        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ contractors:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_managers")
async def show_managers_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Manager).where(Manager.status == True))
            managers = result.scalars().all()

            if not managers:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
                return

            buttons = []
            for manager in managers:
                button_text = f"{manager.id}_{manager.username}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_manager_{manager.id}"
                )])

            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="managers_manage"
            )])

            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_security")
async def show_security_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Security).where(Security.status == True))
            security_list = result.scalars().all()

            if not security_list:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–ë")
                return

            buttons = []
            for security in security_list:
                button_text = f"{security.id}_{security.username}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_security_{security.id}"
                )])

            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="security_manage"
            )])

            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–ë:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_manager_"))
async def view_manager_details(callback: CallbackQuery):
    try:
        manager_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            manager = await session.get(Manager, manager_id)
            if not manager:
                await callback.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = (
                f"ID: {manager.id}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {manager.phone}\n"
                f"Username: @{manager.username}\n"
                f"TG ID: {manager.tg_id}\n"
                f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {manager.time_add_to_db}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {manager.time_registration}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if manager.status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_manager_{manager_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_managers")]
            ])

            await callback.message.answer(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)

@router.callback_query(F.data.startswith("view_security_"))
async def view_security_details(callback: CallbackQuery):
    try:
        security_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            security = await session.get(Security, security_id)
            if not security:
                await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –°–ë –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = (
                f"ID: {security.id}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {security.phone}\n"
                f"Username: @{security.username}\n"
                f"TG ID: {security.tg_id}\n"
                f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {security.time_add_to_db}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {security.time_registration}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if security.status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_security_{security_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_security")]
            ])

            await callback.message.answer(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("delete_manager_"))
async def confirm_delete_manager(callback: CallbackQuery):
    try:
        manager_id = int(callback.data.split("_")[-1])
        await callback.message.answer(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_manager_yes_{manager_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_delete_manager_no_{manager_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)

@router.callback_query(F.data.startswith("delete_security_"))
async def confirm_delete_security(callback: CallbackQuery):
    try:
        security_id = int(callback.data.split("_")[-1])
        await callback.message.answer(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –°–ë?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_security_yes_{security_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_delete_security_no_{security_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_manager_yes_"))
async def execute_delete_manager(callback: CallbackQuery, state: FSMContext):
    try:
        manager_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            stmt = delete(Manager).where(Manager.id == manager_id)
            await session.execute(stmt)
            await session.commit()

        await callback.message.answer("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
        data = await state.get_data()
        user_type = data['user_type']
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"add_{user_type}")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])

        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {user_type}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_security_yes_"))
async def execute_delete_security(callback: CallbackQuery, state: FSMContext):
    try:
        security_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            stmt = delete(Security).where(Security.id == security_id)
            await session.execute(stmt)
            await session.commit()

        await callback.message.answer("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –°–ë —É–¥–∞–ª–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ë
        data = await state.get_data()
        user_type = data['user_type']
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –°–ë", callback_data=f"add_{user_type}")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –°–ë", callback_data="list_security")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])

        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {user_type}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)

