import asyncio
import datetime
from typing import Union

from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy import select, func, or_, and_

from bot import bot
from config import PAGE_SIZE, PASS_TIME, MAX_CAR_PASSES, MAX_TRUCK_PASSES, RAZRAB
from db.models import Resident, AsyncSessionLocal, ResidentContractorRequest, PermanentPass, TemporaryPass
from db.util import get_active_admins_and_managers_tg_ids
from filters import IsResident
from handlers_admin import admin_reply_keyboard

router = Router()
router.message.filter(IsResident())  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
router.callback_query.filter(IsResident())  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –∫–æ–ª–±–µ–∫–æ–≤


class ResidentContractorRegistration(StatesGroup):
    INPUT_PHONE = State()
    INPUT_WORK_TYPES = State()


class PermanentPassStates(StatesGroup):
    INPUT_CAR_BRAND = State()
    INPUT_CAR_MODEL = State()
    INPUT_CAR_NUMBER = State()
    INPUT_CAR_OWNER = State()


class PermanentPassViewStates(StatesGroup):
    VIEWING_PENDING = State()
    VIEWING_APPROVED = State()
    VIEWING_REJECTED = State()


class TemporaryPassViewStates(StatesGroup):
    VIEWING_PENDING = State()
    VIEWING_APPROVED = State()
    VIEWING_REJECTED = State()


class TemporaryPassStates(StatesGroup):
    CHOOSE_VEHICLE_TYPE = State()
    CHOOSE_WEIGHT_CATEGORY = State()
    CHOOSE_LENGTH_CATEGORY = State()
    INPUT_CAR_NUMBER = State()
    INPUT_CAR_BRAND = State()
    INPUT_CARGO_TYPE = State()
    INPUT_PURPOSE = State()
    INPUT_VISIT_DATE = State()
    INPUT_COMMENT = State()


# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
resident_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
    is_persistent=True
)


main_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data="register_contractor")],
    [InlineKeyboardButton(text="–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞", callback_data="permanent_pass_menu")],
    [InlineKeyboardButton(text="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞", callback_data="temporary_pass_menu")],
    [InlineKeyboardButton(text="–û–±—Ä–∞—â–µ–Ω–∏—è –≤ –£–ö", callback_data="appeals_menu")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
])


@router.message(Command("start"))
async def resident_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤"""
    try:
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞!",
            reply_markup=resident_keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: Message):
    try:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞"""
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Resident)
                .where(Resident.tg_id == message.from_user.id)
            )
            resident = result.scalar()

            if not resident:
                return await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            caption = (
                f"üë§ –§–ò–û: {resident.fio}\n"
                f"üè† –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: {resident.plot_number}"
            )


            if resident.photo_id:
                await message.answer_photo(
                    photo=resident.photo_id,
                    caption=caption,
                    reply_markup=main_kb
                )
            else:
                await message.answer(
                    text="üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n" + caption,
                    reply_markup=main_kb
                )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "back_to_main_menu")
async def main_menu(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Resident)
                .where(Resident.tg_id == callback.from_user.id)
            )
            resident = result.scalar()

            if not resident:
                return await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

            caption = (
                f"üë§ –§–ò–û: {resident.fio}\n"
                f"üè† –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: {resident.plot_number}"
            )


            if resident.photo_id:
                await callback.message.answer_photo(
                    photo=resident.photo_id,
                    caption=caption,
                    reply_markup=main_kb
                )
            else:
                await callback.message.answer(
                    text="üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n" + caption,
                    reply_markup=main_kb
                )

    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)



@router.callback_query(F.data == "register_contractor")
async def start_contractor_registration(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:")
        await state.set_state(ResidentContractorRegistration.INPUT_PHONE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, ResidentContractorRegistration.INPUT_PHONE)
async def process_contractor_phone(message: Message, state: FSMContext):
    try:
        await state.update_data(phone=message.text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥—ã –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç:")
        await state.set_state(ResidentContractorRegistration.INPUT_WORK_TYPES)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, ResidentContractorRegistration.INPUT_WORK_TYPES)
async def process_work_types(message: Message, state: FSMContext):
    try:
        data = await state.get_data()

        async with AsyncSessionLocal() as session:
            resident = await session.execute(
                select(Resident).where(Resident.tg_id == message.from_user.id))
            resident = resident.scalar()

            new_request = ResidentContractorRequest(
                resident_id=resident.id,
                phone=data['phone'],
                work_types=message.text
            )
            session.add(new_request)
            await session.commit()

            await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
            tg_ids = await get_active_admins_and_managers_tg_ids()
            for tg_id in tg_ids:
                await bot.send_message(
                    tg_id,
                    text=f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ {resident.fio}.\n(–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è > –ó–∞—è–≤–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤)',
                    reply_markup=admin_reply_keyboard
                )
            caption = (
                f"üë§ –§–ò–û: {resident.fio}\n"
                f"üè† –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: {resident.plot_number}"
            )

            if resident.photo_id:
                await message.answer_photo(
                    photo=resident.photo_id,
                    caption=caption,
                    reply_markup=main_kb
                )
            else:
                await message.answer(
                    text="üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n" + caption,
                    reply_markup=main_kb
                )
            await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "permanent_pass_menu")
async def permanent_pass_menu(callback: CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫", callback_data="create_permanent_pass")],
            [InlineKeyboardButton(text="–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", callback_data="my_pending_passes")],
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="my_approved_passes")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="my_rejected_passes")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ])
        await callback.message.answer("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞", reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    try:
        await main_menu(callback.message)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "create_permanent_pass")
async def start_permanent_pass(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:")
        await state.set_state(PermanentPassStates.INPUT_CAR_BRAND)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, PermanentPassStates.INPUT_CAR_BRAND)
async def process_car_brand(message: Message, state: FSMContext):
    try:
        await state.update_data(car_brand=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã:")
        await state.set_state(PermanentPassStates.INPUT_CAR_MODEL)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, PermanentPassStates.INPUT_CAR_MODEL)
async def process_car_model(message: Message, state: FSMContext):
    try:
        await state.update_data(car_model=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
        await state.set_state(PermanentPassStates.INPUT_CAR_NUMBER)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, PermanentPassStates.INPUT_CAR_NUMBER)
async def process_car_number(message: Message, state: FSMContext):
    try:
        await state.update_data(car_number=message.text)
        await message.answer("–ö–æ–º—É –∏–∑ —á–ª–µ–Ω–æ–≤ –í–∞—à–µ–π —Å–µ–º—å–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å?")
        await state.set_state(PermanentPassStates.INPUT_CAR_OWNER)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, PermanentPassStates.INPUT_CAR_OWNER)
async def process_car_owner(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        async with AsyncSessionLocal() as session:
            resident = await session.execute(
                select(Resident).where(Resident.tg_id == message.from_user.id)
            )
            resident = resident.scalar()

            new_request = PermanentPass(
                resident_id=resident.id,
                car_brand=data['car_brand'],
                car_model=data['car_model'],
                car_number=data['car_number'].upper(),
                car_owner=message.text
            )
            session.add(new_request)
            await session.commit()

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        tg_ids = await get_active_admins_and_managers_tg_ids()
        for tg_id in tg_ids:
            await bot.send_message(
                tg_id,
                text=f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ {resident.fio}.\n(–ü—Ä–æ–ø—É—Å–∫–∞ > –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞ > –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏)',
                reply_markup=admin_reply_keyboard
            )
            await asyncio.sleep(0.05)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫", callback_data="create_permanent_pass")],
            [InlineKeyboardButton(text="–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", callback_data="my_pending_passes")],
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="my_approved_passes")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="my_rejected_passes")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ])
        await message.answer("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–æ–ø—É—Å–∫–æ–≤
@router.callback_query(F.data == "my_pending_passes")
async def show_my_pending_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(PermanentPassViewStates.VIEWING_PENDING)
        await state.update_data(pass_page=0, pass_status='pending')
        await show_my_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "my_approved_passes")
async def show_my_approved_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(PermanentPassViewStates.VIEWING_APPROVED)
        await state.update_data(pass_page=0, pass_status='approved')
        await show_my_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "my_rejected_passes")
async def show_my_rejected_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(PermanentPassViewStates.VIEWING_REJECTED)
        await state.update_data(pass_page=0, pass_status='rejected')
        await show_my_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
async def show_my_passes(message: Union[Message, CallbackQuery], state: FSMContext):
    try:
        data = await state.get_data()
        page = data.get('pass_page', 0)
        status = data.get('pass_status', 'pending')

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
            resident = await session.execute(
                select(Resident).where(Resident.tg_id == message.from_user.id)
            )
            resident = resident.scalar()

            if not resident:
                if isinstance(message, CallbackQuery):
                    await message.message.answer("‚ùå –†–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    await message.answer("‚ùå –†–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤
            total_count = await session.scalar(
                select(func.count(PermanentPass.id))
                .where(
                    PermanentPass.resident_id == resident.id,
                    PermanentPass.status == status
                )
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            result = await session.execute(
                select(PermanentPass)
                .where(
                    PermanentPass.resident_id == resident.id,
                    PermanentPass.status == status
                )
                .order_by(PermanentPass.created_at.desc())
                .offset(page * PAGE_SIZE)
                .limit(PAGE_SIZE)
            )
            passes = result.scalars().all()

        if not passes:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ"
            if isinstance(message, CallbackQuery):
                await message.answer(text)
            else:
                await message.answer(text)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        for pass_item in passes:
            btn_text = f"{pass_item.car_brand} {pass_item.car_model} - {pass_item.car_number}"
            if len(btn_text) > 30:
                btn_text = btn_text[:27] + "..."
            buttons.append(
                [InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"view_my_pass_{pass_item.id}"
                )]
            )

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data="my_pass_prev")
            )

        if (page + 1) * PAGE_SIZE < total_count:
            pagination_buttons.append(
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data="my_pass_next")
            )

        if pagination_buttons:
            buttons.append(pagination_buttons)

        buttons.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="permanent_pass_menu")]
        )

        status_text = {
            'pending': "–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏",
            'approved': "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ",
            'rejected': "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
        }.get(status, "")

        text = f"–í–∞—à–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞ ({status_text}):"
        if isinstance(message, CallbackQuery):
            await message.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        else:
            await message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@ router.callback_query(F.data == "my_pass_prev", StateFilter(PermanentPassViewStates))
async def handle_my_pass_prev(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_page = data.get('pass_page', 0)
        if current_page > 0:
            await state.update_data(pass_page=current_page - 1)
            await show_my_passes(callback, state)
        await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "my_pass_next", StateFilter(PermanentPassViewStates))
async def handle_my_pass_next(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_page = data.get('pass_page', 0)
        await state.update_data(pass_page=current_page + 1)
        await show_my_passes(callback, state)
        await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–ø—É—Å–∫–∞
@router.callback_query(F.data.startswith("view_my_pass_"))
async def view_my_pass_details(callback: CallbackQuery):
    try:
        pass_id = int(callback.data.split("_")[-1])

        async with AsyncSessionLocal() as session:
            pass_item = await session.get(PermanentPass, pass_id)
            if not pass_item:
                await callback.answer("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            status_text = {
                'pending': "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
                'approved': "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                'rejected': "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
            }.get(pass_item.status, "")

            text = (
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–ú–∞—Ä–∫–∞: {pass_item.car_brand}\n"
                f"–ú–æ–¥–µ–ª—å: {pass_item.car_model}\n"
                f"–ù–æ–º–µ—Ä: {pass_item.car_number}\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü: {pass_item.car_owner}\n"
                f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {pass_item.created_at.strftime('%d.%m.%Y')}"
            )
            if pass_item.time_registration:
                if pass_item.status == 'approved':
                    text += f"\n–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pass_item.time_registration.strftime('%d.%m.%Y')}"
                elif pass_item.status == 'rejected':
                    text += f"\n–î–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {pass_item.time_registration.strftime('%d.%m.%Y')}"


            # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if pass_item.status == 'rejected' and pass_item.resident_comment:
                text += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{pass_item.resident_comment}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_passes")]
            ])

            await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–ø—É—Å–∫–æ–≤
@router.callback_query(F.data == "back_to_my_passes")
async def back_to_my_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await show_my_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "temporary_pass_menu")
async def temporary_pass_menu(callback: CallbackQuery):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫", callback_data="create_temporary_pass")],
            [InlineKeyboardButton(text="–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", callback_data="my_pending_temp_passes")],
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", callback_data="my_approved_temp_passes")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ", callback_data="my_rejected_temp_passes")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ])
        await callback.message.answer("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞", reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "create_temporary_pass")
async def start_temporary_pass(callback: CallbackQuery, state: FSMContext):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–õ–µ–≥–∫–æ–≤–∞—è", callback_data="vehicle_type_car")],
            [InlineKeyboardButton(text="–ì—Ä—É–∑–æ–≤–∞—è", callback_data="vehicle_type_truck")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—à–∏–Ω—ã:", reply_markup=keyboard)
        await state.set_state(TemporaryPassStates.CHOOSE_VEHICLE_TYPE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(TemporaryPassStates.CHOOSE_VEHICLE_TYPE, F.data.startswith("vehicle_type_"))
async def process_vehicle_type(callback: CallbackQuery, state: FSMContext):
    try:
        vehicle_type = callback.data.split("_")[-1]
        await state.update_data(vehicle_type=vehicle_type)

        if vehicle_type == "truck":
            # –î–ª—è –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–Ω–Ω–∞–∂
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚â§ 12 —Ç–æ–Ω–Ω", callback_data="weight_light")],
                [InlineKeyboardButton(text="> 12 —Ç–æ–Ω–Ω", callback_data="weight_heavy")]
            ])
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω–Ω–∞–∂:", reply_markup=keyboard)
            await state.set_state(TemporaryPassStates.CHOOSE_WEIGHT_CATEGORY)
        else:
            # –î–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–º–µ—Ä—É
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
            await state.set_state(TemporaryPassStates.INPUT_CAR_NUMBER)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(TemporaryPassStates.CHOOSE_WEIGHT_CATEGORY, F.data.startswith("weight_"))
async def process_weight_category(callback: CallbackQuery, state: FSMContext):
    try:
        weight_category = callback.data.split("_")[-1]
        await state.update_data(weight_category=weight_category)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚â§ 7 –º–µ—Ç—Ä–æ–≤", callback_data="length_short")],
            [InlineKeyboardButton(text="> 7 –º–µ—Ç—Ä–æ–≤", callback_data="length_long")]
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –º–∞—à–∏–Ω—ã:", reply_markup=keyboard)
        await state.set_state(TemporaryPassStates.CHOOSE_LENGTH_CATEGORY)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(TemporaryPassStates.CHOOSE_LENGTH_CATEGORY, F.data.startswith("length_"))
async def process_length_category(callback: CallbackQuery, state: FSMContext):
    try:
        length_category = callback.data.split("_")[-1]
        await state.update_data(length_category=length_category)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
        await state.set_state(TemporaryPassStates.INPUT_CAR_NUMBER)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã
@router.message(F.text, TemporaryPassStates.INPUT_CAR_NUMBER)
async def process_car_number(message: Message, state: FSMContext):
    try:
        await state.update_data(car_number=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:")
        await state.set_state(TemporaryPassStates.INPUT_CAR_BRAND)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–∏ –º–∞—à–∏–Ω—ã
@router.message(F.text, TemporaryPassStates.INPUT_CAR_BRAND)
async def process_car_brand(message: Message, state: FSMContext):
    try:
        await state.update_data(car_brand=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:")
        await state.set_state(TemporaryPassStates.INPUT_CARGO_TYPE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –≥—Ä—É–∑–∞
@router.message(F.text, TemporaryPassStates.INPUT_CARGO_TYPE)
async def process_cargo_type(message: Message, state: FSMContext):
    try:
        await state.update_data(cargo_type=message.text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞:")
        await state.set_state(TemporaryPassStates.INPUT_PURPOSE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞
@router.message(F.text, TemporaryPassStates.INPUT_PURPOSE)
async def process_purpose(message: Message, state: FSMContext):
    try:
        await state.update_data(purpose=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(TemporaryPassStates.INPUT_VISIT_DATE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø—Ä–∏–µ–∑–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@router.message(F.text, TemporaryPassStates.INPUT_VISIT_DATE)
async def process_visit_date(message: Message, state: FSMContext):
    try:
        visit_date = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        if visit_date < datetime.datetime.now().date():
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if visit_date > (datetime.datetime.now() + datetime.timedelta(days=31)).date():
            await message.answer("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–ª—å–∑—è –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(visit_date=visit_date)
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–µ—Ç):")
        await state.set_state(TemporaryPassStates.INPUT_COMMENT)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text, TemporaryPassStates.INPUT_COMMENT)
async def process_comment_and_save(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        comment = message.text if message.text else None
        status = "pending"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
            resident = await session.execute(
                select(Resident).where(Resident.tg_id == message.from_user.id)
            )
            resident = resident.scalar()

            if not resident:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return

            # –î–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
            new_visit_date = data['visit_date']
            new_end_date = new_visit_date + datetime.timedelta(days=PASS_TIME)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            if data['vehicle_type'] == 'car':
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞
                result = await session.execute(
                    select(TemporaryPass).where(
                        TemporaryPass.resident_id == resident.id,
                        TemporaryPass.vehicle_type == 'car',
                        TemporaryPass.status == 'approved',
                        TemporaryPass.visit_date <= new_end_date,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ <= –∫–æ–Ω—Ü–∞ –Ω–æ–≤–æ–≥–æ
                        func.date(TemporaryPass.visit_date, f'+{PASS_TIME} days') >= new_visit_date
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ >= –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ
                    )
                )
                count = len(result.scalars().all())
                if count < MAX_CAR_PASSES:
                    status = "approved"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–∞–ª—ã—Ö –≥—Ä—É–∑–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            elif (data['vehicle_type'] == 'truck' and
                  data.get('weight_category') == 'light' and
                  data.get('length_category') == 'short'):

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –º–∞–ª—ã—Ö –≥—Ä—É–∑–æ–≤—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤, –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø–æ –¥–∞—Ç–∞–º
                result = await session.execute(
                    select(TemporaryPass).where(
                        TemporaryPass.resident_id == resident.id,
                        TemporaryPass.vehicle_type == 'truck',
                        TemporaryPass.status == 'approved',
                        TemporaryPass.visit_date <= new_end_date,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ <= –∫–æ–Ω—Ü–∞ –Ω–æ–≤–æ–≥–æ
                        func.date(TemporaryPass.visit_date, f'+{PASS_TIME} days') >= new_visit_date
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ >= –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ
                    )
                )
                count = len(result.scalars().all())
                if count < MAX_TRUCK_PASSES:
                    status = "approved"

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫
            new_pass = TemporaryPass(
                owner_type="resident",
                resident_id=resident.id,
                vehicle_type=data.get("vehicle_type"),
                weight_category=data.get("weight_category", None),
                length_category=data.get("length_category", None),
                car_number=data.get("car_number").upper(),
                car_brand=data.get("car_brand"),
                cargo_type=data.get("cargo_type"),
                purpose=data.get("purpose"),
                visit_date=new_visit_date,
                owner_comment=comment,
                status=status,
                created_at=datetime.datetime.now(),
                time_registration=datetime.datetime.now() if status == "approved" else None
            )

            session.add(new_pass)
            await session.commit()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫", callback_data="create_temporary_pass")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ])
        if status == "approved":
            await message.answer("‚úÖ –í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ–¥–æ–±—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!", reply_markup=keyboard)
        else:
            await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!", reply_markup=keyboard)
            tg_ids = await get_active_admins_and_managers_tg_ids()
            for tg_id in tg_ids:
                await bot.send_message(
                    tg_id,
                    text=f'–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –æ—Ç —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ {resident.fio}.\n(–ü—Ä–æ–ø—É—Å–∫–∞ > –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞ > –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏)',
                    reply_markup=admin_reply_keyboard
                )
                await asyncio.sleep(0.05)
        await state.clear()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
@router.callback_query(F.data == "my_pending_temp_passes")
async def show_my_pending_temp_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(TemporaryPassViewStates.VIEWING_PENDING)
        await state.update_data(temp_pass_page=0, temp_pass_status='pending')
        await show_my_temp_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "my_approved_temp_passes")
async def show_my_approved_temp_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(TemporaryPassViewStates.VIEWING_APPROVED)
        await state.update_data(temp_pass_page=0, temp_pass_status='approved')
        await show_my_temp_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "my_rejected_temp_passes")
async def show_my_rejected_temp_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(TemporaryPassViewStates.VIEWING_REJECTED)
        await state.update_data(temp_pass_page=0, temp_pass_status='rejected')
        await show_my_temp_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
async def show_my_temp_passes(message: Union[Message, CallbackQuery], state: FSMContext):
    try:
        data = await state.get_data()
        page = data.get('temp_pass_page', 0)
        status = data.get('temp_pass_status', 'pending')

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
            resident = await session.execute(
                select(Resident).where(Resident.tg_id == message.from_user.id)
            )
            resident = resident.scalar()

            if not resident:
                if isinstance(message, CallbackQuery):
                    await message.answer("‚ùå –†–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    await message.answer("‚ùå –†–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤
            total_count = await session.scalar(
                select(func.count(TemporaryPass.id))
                .where(
                    TemporaryPass.resident_id == resident.id,
                    TemporaryPass.status == status
                )
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            result = await session.execute(
                select(TemporaryPass)
                .where(
                    TemporaryPass.resident_id == resident.id,
                    TemporaryPass.status == status
                )
                .order_by(TemporaryPass.created_at.desc())
                .offset(page * PAGE_SIZE)
                .limit(PAGE_SIZE)
            )
            passes = result.scalars().all()

        if not passes:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ"
            if isinstance(message, CallbackQuery):
                await message.answer(text)
            else:
                await message.answer(text)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        for pass_item in passes:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: –¥–∞—Ç–∞ + –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã
            btn_text = f"{pass_item.visit_date.strftime('%d.%m.%Y')} - {pass_item.car_number}"
            if len(btn_text) > 30:
                btn_text = btn_text[:27] + "..."
            buttons.append(
                [InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"view_my_temp_pass_{pass_item.id}"
                )]
            )

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data="my_temp_pass_prev")
            )

        if (page + 1) * PAGE_SIZE < total_count:
            pagination_buttons.append(
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è", callback_data="my_temp_pass_next")
            )

        if pagination_buttons:
            buttons.append(pagination_buttons)

        buttons.append(
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="temporary_pass_menu")]
        )

        status_text = {
            'pending': "–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏",
            'approved': "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ",
            'rejected': "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
        }.get(status, "")

        text = f"–í–∞—à–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞ ({status_text}):"
        if isinstance(message, CallbackQuery):
            await message.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        else:
            await message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
@router.callback_query(F.data == "my_temp_pass_prev", StateFilter(TemporaryPassViewStates))
async def handle_my_temp_pass_prev(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_page = data.get('temp_pass_page', 0)
        if current_page > 0:
            await state.update_data(temp_pass_page=current_page - 1)
            await show_my_temp_passes(callback, state)
        await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "my_temp_pass_next", StateFilter(TemporaryPassViewStates))
async def handle_my_temp_pass_next(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        current_page = data.get('temp_pass_page', 0)
        await state.update_data(temp_pass_page=current_page + 1)
        await show_my_temp_passes(callback, state)
        await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
@router.callback_query(F.data.startswith("view_my_temp_pass_"))
async def view_my_temp_pass_details(callback: CallbackQuery):
    try:
        pass_id = int(callback.data.split("_")[-1])

        async with AsyncSessionLocal() as session:
            pass_item = await session.get(TemporaryPass, pass_id)
            if not pass_item:
                await callback.answer("–ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            status_text = {
                'pending': "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
                'approved': "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                'rejected': "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
            }.get(pass_item.status, "")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¢–°
            vehicle_type = "–õ–µ–≥–∫–æ–≤–∞—è" if pass_item.vehicle_type == "car" else "–ì—Ä—É–∑–æ–≤–∞—è"
            weight_category = ""
            length_category = ""

            if pass_item.vehicle_type == "truck":
                weight_category = "\n–¢–æ–Ω–Ω–∞–∂: " + ("‚â§ 12 —Ç–æ–Ω–Ω" if pass_item.weight_category == "light" else "> 12 —Ç–æ–Ω–Ω")
                length_category = "\n–î–ª–∏–Ω–∞: " + ("‚â§ 7 –º–µ—Ç—Ä–æ–≤" if pass_item.length_category == "short" else "> 7 –º–µ—Ç—Ä–æ–≤")

            text = (
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–¢–∏–ø –¢–°: {vehicle_type}"
                f"{weight_category}"
                f"{length_category}\n"
                f"–ù–æ–º–µ—Ä: {pass_item.car_number}\n"
                f"–ú–∞—Ä–∫–∞: {pass_item.car_brand}\n"
                f"–¢–∏–ø –≥—Ä—É–∑–∞: {pass_item.cargo_type}\n"
                f"–¶–µ–ª—å –≤–∏–∑–∏—Ç–∞: {pass_item.purpose}\n"
                f"–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {pass_item.visit_date.strftime('%d.%m.%Y')}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {pass_item.owner_comment or '–Ω–µ—Ç'}"
            )

            if pass_item.status == 'rejected' and pass_item.resident_comment:
                text += f"\n\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n{pass_item.resident_comment}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_temp_passes")]
            ])

            await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
@router.callback_query(F.data == "back_to_my_temp_passes")
async def back_to_my_temp_passes(callback: CallbackQuery, state: FSMContext):
    try:
        await show_my_temp_passes(callback, state)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)
