import asyncio

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, delete

from bot import bot
from config import ADMIN_IDS, RAZRAB
from db.models import Manager, Security, Resident, Contractor, RegistrationRequest, \
    ContractorRegistrationRequest, AsyncSessionLocal, ResidentContractorRequest, PermanentPass, TemporaryPass, Appeal
from filters import IsAdminOrManager

router = Router()
router.message.filter(IsAdminOrManager())
router.callback_query.filter(IsAdminOrManager())


class AddUserStates(StatesGroup):
    WAITING_PHONE = State()
    CHOOSE_TYPE = State()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_admin_menu()
    )


admin_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
    is_persistent=True
)


def is_valid_phone(phone: str) -> bool:
    return len(phone) == 11 and phone.isdigit() and phone[0] == '8'


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
def get_admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë•–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="user_management")],
        [InlineKeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration_menu")],
        [InlineKeyboardButton(text="üö™ –ü—Ä–æ–ø—É—Å–∫–∞", callback_data="passes_menu")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—Å–∫–∞", callback_data="search_pass")],
        [InlineKeyboardButton(text="üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics_menu")],
        [InlineKeyboardButton(text="üì® –û–±—Ä–∞—â–µ–Ω–∏—è –≤ –£–ö", callback_data="appeals_management")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ])


def get_admin_user_management_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω–µ–¥–∂–µ—Ä—ã", callback_data="managers_manage")],
        [InlineKeyboardButton(text="–°–ë", callback_data="security_manage")],
        [InlineKeyboardButton(text="–†–µ–∑–∏–¥–µ–Ω—Ç—ã", callback_data="residents_manage")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ä—è–¥—á–∏–∫–∏", callback_data="contractors_manage")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])


def get_manager_user_management_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–µ–∑–∏–¥–µ–Ω—Ç—ã", callback_data="residents_manage")],
        [InlineKeyboardButton(text="–ü–æ–¥—Ä—è–¥—á–∏–∫–∏", callback_data="contractors_manage")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])


def get_add_menu(user_type: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å {user_type}", callback_data=f"add_{user_type}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])


@router.message(CommandStart())
async def process_start_admin(message: Message):
    try:
        await message.answer(
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
            reply_markup=admin_reply_keyboard
        )
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.in_({"user_management", "back_to_manage"}))
async def user_management(callback: CallbackQuery):
    try:
        if callback.from_user.id in ADMIN_IDS:
            kb = get_admin_user_management_menu()
        else:
            kb = get_manager_user_management_menu()
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=kb
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.endswith("manage"))
async def manage_category(callback: CallbackQuery, state: FSMContext):
    try:
        user_type = callback.data.split("_")[0]
        await state.update_data(user_type=user_type)

        # –î–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
        if user_type == 'residents':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="list_residents")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
        # –î–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
        elif user_type == 'contractors':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="list_contractors")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
        elif user_type == 'managers':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
            # –î–ª—è –°–ë
        elif user_type == 'security':
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –°–ë", callback_data=f"add_{user_type}")],
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –°–ë", callback_data="list_security")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
            ])
        else:
            return

        await callback.message.edit_text(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {user_type}:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("add_"))
async def start_add_user(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await state.set_state(AddUserStates.WAITING_PHONE)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.message(F.text, AddUserStates.WAITING_PHONE)
async def process_phone(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_type = data['user_type']
        phone = message.text
        if not is_valid_phone(phone):
            await message.answer('–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑!')
            return

        async with AsyncSessionLocal() as session:
            try:
                if user_type == 'managers':
                    new_user = Manager(phone=phone)
                elif user_type == 'security':
                    new_user = Security(phone=phone)
                elif user_type == 'residents':
                    new_user = Resident(phone=phone)
                elif user_type == 'contractors':
                    new_user = Contractor(phone=phone)

                session.add(new_user)
                await session.commit()
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {user_type}!")
                if user_type == 'residents':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="list_residents")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                # –î–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
                elif user_type == 'contractors':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="list_contractors")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                elif user_type == 'managers':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                    # –î–ª—è –°–ë
                elif user_type == 'security':
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –°–ë", callback_data=f"add_{user_type}")],
                        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –°–ë", callback_data="list_security")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
                    ])
                else:
                    return

                await message.answer(
                    text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {user_type}:",
                    reply_markup=keyboard
                )

            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                await session.rollback()

    except Exception as e:
        await bot.send_message(RAZRAB, f'{message.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_residents")
async def show_residents_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º True
            result = await session.execute(
                select(Resident).where(Resident.status == True))
            residents = result.scalars().all()

            if not residents:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤")
                return

            buttons = []
            for resident in residents:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: ID –∏ –§–ò–û
                button_text = f"{resident.fio}"
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_resident_{resident.id}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="residents_manage"
            )])
            try:
                await callback.message.edit_text(
                    "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
            except:
                await callback.message.answer(text="–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤:",
                                              reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_resident_"))
async def view_resident_details(callback: CallbackQuery):
    try:
        resident_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            resident = await session.get(Resident, resident_id)
            if not resident:
                await callback.answer("–†–µ–∑–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"ID: {resident.id}\n"
                f"–§–ò–û: {resident.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {resident.phone}\n"
                f"–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞: {resident.plot_number}\n"
                f"TG: @{resident.username}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {resident.time_registration}"
            )

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_resident_{resident_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_residents")]
            ])

            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_contractors")
async def show_contractors_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º True
            result = await session.execute(
                select(Contractor).where(Contractor.status == True))
            contractors = result.scalars().all()

            if not contractors:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤")
                return

            buttons = []
            for contractor in contractors:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: ID –∏ –§–ò–û
                button_text = f"{contractor.company}_{contractor.position}"
                # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_contractor_{contractor.id}"
                )])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="contractors_manage"
            )])

            try:
                await callback.message.edit_text(
                    "–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
            except:
                await callback.message.answer(
                    text="–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_contractor_"))
async def view_contractor_details(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            contractor = await session.get(Contractor, contractor_id)
            if not contractor:
                await callback.answer("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"ID: {contractor.id}\n"
                f"–§–ò–û: {contractor.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {contractor.phone}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {contractor.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {contractor.position}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {contractor.affiliation}\n"
                f"TG: @{contractor.username}\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: {contractor.can_add_contractor}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {contractor.time_registration}"
            )
            if contractor.can_add_contractor == True:
                text_admin = '‚úÖ–ü–æ–¥—Ä—è–¥—á–∏–∫-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            else:
                text_admin = '‚ùå–ü–æ–¥—Ä—è–¥—á–∏–∫-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_contractor_{contractor_id}")],
                [InlineKeyboardButton(text=text_admin, callback_data=f"change_admin_{contractor_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_contractors")]
            ])

            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("delete_resident_"))
async def confirm_delete_resident(callback: CallbackQuery):
    try:
        resident_id = int(callback.data.split("_")[-1])
        await callback.message.answer(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_yes_{resident_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_delete_no_{resident_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_no_"))
async def cancel_delete(callback: CallbackQuery):
    try:
        resident_id = int(callback.data.split("_")[-1])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
        await view_resident_details(callback)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_yes_"))
async def execute_delete(callback: CallbackQuery, state: FSMContext):
    try:
        resident_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            stmt1 = delete(RegistrationRequest).where(RegistrationRequest.resident_id == resident_id)
            stmt2 = delete(ResidentContractorRequest).where(ResidentContractorRequest.resident_id == resident_id)
            stmt3 = delete(PermanentPass).where(PermanentPass.resident_id == resident_id)
            stmt4 = delete(TemporaryPass).where(TemporaryPass.resident_id == resident_id)
            stmt5 = delete(Appeal).where(Appeal.resident_id == resident_id)
            await session.execute(stmt1)
            await session.execute(stmt2)
            await session.execute(stmt3)
            await session.execute(stmt4)
            await session.execute(stmt5)
            resident = await session.get(Resident, resident_id)
            await bot.send_message(resident.tg_id, '–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –ø–æ –æ—à–∏–±–∫–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é "–ï–ª–∏ Estate"')
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
            stmt6 = delete(Resident).where(Resident.id == resident_id)
            await session.execute(stmt6)
            await session.commit()

        await callback.message.answer("‚úÖ –†–µ–∑–∏–¥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data=f"add_residents")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤", callback_data="list_residents")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])
        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ residents:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("delete_contractor_"))
async def confirm_delete_contractor(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        await callback.message.answer(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_del_cont_yes_{contractor_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_del_cont_no_{contractor_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("confirm_del_cont_no_"))
async def cancel_delete_contractor(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
        await view_contractor_details(callback)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
@router.callback_query(F.data.startswith("confirm_del_cont_yes_"))
async def execute_delete_contractor(callback: CallbackQuery, state: FSMContext):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            stmt1 = delete(ContractorRegistrationRequest).where(
                ContractorRegistrationRequest.contractor_id == contractor_id
            )
            stmt2 = delete(TemporaryPass).where(
                TemporaryPass.contractor_id == contractor_id
            )
            await session.execute(stmt1)
            await session.execute(stmt2)
            contractor = await session.get(Contractor, contractor_id)
            await bot.send_message(contractor.tg_id,
                                   '–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –ø–æ –æ—à–∏–±–∫–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é "–ï–ª–∏ Estate"')
            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
            stmt3 = delete(Contractor).where(Contractor.id == contractor_id)
            await session.execute(stmt3)
            await session.commit()

        await callback.message.answer("‚úÖ –ü–æ–¥—Ä—è–¥—á–∏–∫ —É–¥–∞–ª–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", callback_data=f"add_contractors")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤", callback_data="list_contractors")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])
        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ contractors:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_managers")
async def show_managers_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Manager).where(Manager.status == True))
            managers = result.scalars().all()

            if not managers:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
                return

            buttons = []
            for manager in managers:
                button_text = f"{manager.fio}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_manager_{manager.id}"
                )])

            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="managers_manage"
            )])

            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data == "list_security")
async def show_security_list(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(Security).where(Security.status == True))
            security_list = result.scalars().all()

            if not security_list:
                await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–ë")
                return

            buttons = []
            for security in security_list:
                button_text = f"{security.fio}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."

                buttons.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_security_{security.id}"
                )])

            buttons.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="security_manage"
            )])

            await callback.message.edit_text(
                "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–ë:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("view_manager_"))
async def view_manager_details(callback: CallbackQuery):
    try:
        manager_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            manager = await session.get(Manager, manager_id)
            if not manager:
                await callback.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = (
                f"ID: {manager.id}\n"
                f"–§–ò–û: {manager.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {manager.phone}\n"
                f"Username: @{manager.username}\n"
                f"TG ID: {manager.tg_id}\n"
                f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {manager.time_add_to_db}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {manager.time_registration}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if manager.status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_manager_{manager_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_managers")]
            ])

            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)

@router.callback_query(F.data.startswith("view_security_"))
async def view_security_details(callback: CallbackQuery):
    try:
        security_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            security = await session.get(Security, security_id)
            if not security:
                await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –°–ë –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = (
                f"ID: {security.id}\n"
                f"–§–ò–û: {security.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {security.phone}\n"
                f"Username: @{security.username}\n"
                f"TG ID: {security.tg_id}\n"
                f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {security.time_add_to_db}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {security.time_registration}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if security.status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_security_{security_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_security")]
            ])

            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("delete_manager_"))
async def confirm_delete_manager(callback: CallbackQuery):
    try:
        manager_id = int(callback.data.split("_")[-1])
        await callback.message.edit_text(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_manager_yes_{manager_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_delete_manager_no_{manager_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)

@router.callback_query(F.data.startswith("delete_security_"))
async def confirm_delete_security(callback: CallbackQuery):
    try:
        security_id = int(callback.data.split("_")[-1])
        await callback.message.edit_text(
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –°–ë?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_security_yes_{security_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"confirm_delete_security_no_{security_id}")]
            ])
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_manager_yes_"))
async def execute_delete_manager(callback: CallbackQuery, state: FSMContext):
    try:
        manager_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            manager = await session.get(Manager, manager_id)
            await bot.send_message(manager.tg_id,
                                   '–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –ø–æ –æ—à–∏–±–∫–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é "–ï–ª–∏ Estate"')
            stmt = delete(Manager).where(Manager.id == manager_id)
            await session.execute(stmt)
            await session.commit()

        await callback.message.answer("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data=f"add_managers")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="list_managers")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])

        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ managers:",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_security_yes_"))
async def execute_delete_security(callback: CallbackQuery, state: FSMContext):
    try:
        security_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            security = await session.get(Security, security_id)
            await bot.send_message(security.tg_id,
                                   '–í–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –ø–æ –æ—à–∏–±–∫–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é "–ï–ª–∏ Estate"')
            stmt = delete(Security).where(Security.id == security_id)
            await session.execute(stmt)
            await session.commit()

        await callback.message.answer("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –°–ë —É–¥–∞–ª–µ–Ω")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –°–ë
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –°–ë", callback_data=f"add_security")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –°–ë", callback_data="list_security")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_manage")]
        ])

        await callback.message.answer(
            text=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ security",
            reply_markup=keyboard
        )
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_manager_no_"))
async def execute_no_delete_manager(callback: CallbackQuery, state: FSMContext):
    try:
        manager_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            manager = await session.get(Manager, manager_id)
            if not manager:
                await callback.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = (
                f"ID: {manager.id}\n"
                f"–§–ò–û: {manager.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {manager.phone}\n"
                f"Username: @{manager.username}\n"
                f"TG ID: {manager.tg_id}\n"
                f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {manager.time_add_to_db}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {manager.time_registration}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if manager.status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_manager_{manager_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_managers")]
            ])

            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("confirm_delete_security_no_"))
async def execute_no_delete_security(callback: CallbackQuery, state: FSMContext):
    try:
        security_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            security = await session.get(Security, security_id)
            if not security:
                await callback.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –°–ë –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            text = (
                f"ID: {security.id}\n"
                f"–§–ò–û: {security.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {security.phone}\n"
                f"Username: @{security.username}\n"
                f"TG ID: {security.tg_id}\n"
                f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {security.time_add_to_db}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {security.time_registration}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if security.status else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_security_{security_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_security")]
            ])

            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


@router.callback_query(F.data.startswith("change_admin_"))
async def change_contractor_admin(callback: CallbackQuery):
    try:
        contractor_id = int(callback.data.split("_")[-1])
        async with AsyncSessionLocal() as session:
            contractor = await session.get(Contractor, contractor_id)
            if not contractor:
                await callback.answer("–ü–æ–¥—Ä—è–¥—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"ID: {contractor.id}\n"
                f"–§–ò–û: {contractor.fio}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {contractor.phone}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {contractor.company}\n"
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {contractor.position}\n"
                f"–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å: {contractor.affiliation}\n"
                f"TG: @{contractor.username}\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å—É–±–ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: {not contractor.can_add_contractor}\n"
                f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {contractor.time_registration}"
            )
            if contractor.can_add_contractor == False:
                text_admin = '‚úÖ–ü–æ–¥—Ä—è–¥—á–∏–∫-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            else:
                text_admin = '‚ùå–ü–æ–¥—Ä—è–¥—á–∏–∫-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_contractor_{contractor_id}")],
                [InlineKeyboardButton(text=text_admin, callback_data=f"change_admin_{contractor_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_contractors")]
            ])
            await callback.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
            await callback.answer()
            contractor.can_add_contractor = not contractor.can_add_contractor
            await session.commit()
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)
