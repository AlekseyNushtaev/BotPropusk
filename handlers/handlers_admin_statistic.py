# handlers_admin_statistic.py
import asyncio
import logging
from io import BytesIO

import openpyxl
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from openpyxl.workbook import Workbook
from sqlalchemy import select, func

from bot import bot
from db.models import AsyncSessionLocal, Resident, Contractor, PermanentPass, TemporaryPass
from config import ADMIN_IDS, RAZRAB
from filters import IsAdminOrManager

router = Router()
router.message.filter(IsAdminOrManager())
router.callback_query.filter(IsAdminOrManager())


@router.callback_query(F.data == "statistics_menu")
async def show_statistics(callback: CallbackQuery):
    try:
        async with AsyncSessionLocal() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º
            total_residents = await session.scalar(select(func.count(Resident.id)))
            registered_residents = await session.scalar(
                select(func.count(Resident.id))
                .where(Resident.status == True)
            )
            unregistered_residents = total_residents - registered_residents

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º
            total_contractors = await session.scalar(select(func.count(Contractor.id)))
            registered_contractors = await session.scalar(
                select(func.count(Contractor.id))
                .where(Contractor.status == True)
            )
            unregistered_contractors = total_contractors - registered_contractors

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –ø—Ä–æ–ø—É—Å–∫–∞–º
            total_permanent = await session.scalar(select(func.count(PermanentPass.id)))
            pending_permanent = await session.scalar(
                select(func.count(PermanentPass.id))
                .where(PermanentPass.status == 'pending')
            )
            approved_permanent = await session.scalar(
                select(func.count(PermanentPass.id))
                .where(PermanentPass.status == 'approved')
            )
            rejected_permanent = await session.scalar(
                select(func.count(PermanentPass.id))
                .where(PermanentPass.status == 'rejected')
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–æ–ø—É—Å–∫–∞–º
            total_temporary = await session.scalar(select(func.count(TemporaryPass.id)))
            pending_temporary = await session.scalar(
                select(func.count(TemporaryPass.id))
                .where(TemporaryPass.status == 'pending')
            )
            approved_temporary = await session.scalar(
                select(func.count(TemporaryPass.id))
                .where(TemporaryPass.status == 'approved')
            )
            rejected_temporary = await session.scalar(
                select(func.count(TemporaryPass.id))
                .where(TemporaryPass.status == 'rejected')
            )

            total_passes = total_permanent + total_temporary
            pending_passes = pending_permanent + pending_temporary
            approved_passes = approved_permanent + approved_temporary
            rejected_passes = rejected_temporary + rejected_permanent

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            "üë§ <b>–†–µ–∑–∏–¥–µ–Ω—Ç—ã:</b>\n"
            f"  –í—Å–µ–≥–æ: {total_residents}\n"
            f"  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {registered_residents}\n"
            f"  –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {unregistered_residents}\n\n"
    
            "üë∑ <b>–ü–æ–¥—Ä—è–¥—á–∏–∫–∏:</b>\n"
            f"  –í—Å–µ–≥–æ: {total_contractors}\n"
            f"  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {registered_contractors}\n"
            f"  –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {unregistered_contractors}\n\n"
    
            "üé´ <b>–í—Å–µ –ø—Ä–æ–ø—É—Å–∫–∞:</b>\n"
            f"  –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_passes}\n"
            f"  –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {pending_passes}\n"
            f"  –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {approved_passes}\n"
            f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected_passes}\n\n"
    
            "üîñ <b>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞:</b>\n"
            f"  –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_permanent}\n"
            f"  –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {pending_permanent}\n"
            f"  –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {approved_permanent}\n"
            f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected_permanent}\n\n"
    
            "‚è≥ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞:</b>\n"
            f"  –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_temporary}\n"
            f"  –ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {pending_temporary}\n"
            f"  –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {approved_temporary}\n"
            f"  –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {rejected_temporary}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ xlsx", callback_data="export_to_xlsx")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        try:
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        except:
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
@router.callback_query(F.data == "export_to_xlsx")
async def export_statistics_to_xlsx(callback: CallbackQuery):
    try:
        await callback.answer("–§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        async with AsyncSessionLocal() as session:
            wb = Workbook()

            # –õ–∏—Å—Ç: –†–µ–∑–∏–¥–µ–Ω—Ç—ã
            ws_res = wb.active
            ws_res.title = "–†–µ–∑–∏–¥–µ–Ω—Ç—ã"
            residents = await session.execute(select(Resident))
            ws_res.append(["ID", "–¢–µ–ª–µ—Ñ–æ–Ω", "–§–ò–û", "–£—á–∞—Å—Ç–æ–∫", "TG ID", "–°—Ç–∞—Ç—É—Å"])
            for res in residents.scalars():
                ws_res.append([
                    res.id, res.phone, res.fio, res.plot_number,
                    res.tg_id, "–ê–∫—Ç–∏–≤–µ–Ω" if res.status else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                ])

            # –õ–∏—Å—Ç: –ü–æ–¥—Ä—è–¥—á–∏–∫–∏
            ws_contr = wb.create_sheet("–ü–æ–¥—Ä—è–¥—á–∏–∫–∏")
            contractors = await session.execute(select(Contractor))
            ws_contr.append(["ID", "–¢–µ–ª–µ—Ñ–æ–Ω", "–§–ò–û", "–ö–æ–º–ø–∞–Ω–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "TG ID", "–°—Ç–∞—Ç—É—Å"])
            for contr in contractors.scalars():
                ws_contr.append([
                    contr.id, contr.phone, contr.fio, contr.company,
                    contr.position, contr.tg_id, "–ê–∫—Ç–∏–≤–µ–Ω" if contr.status else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                ])

            # –õ–∏—Å—Ç: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞
            ws_perm = wb.create_sheet("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞")
            stmt = select(
                PermanentPass,
                Resident.fio,
                Resident.plot_number
            ).join(Resident, PermanentPass.resident_id == Resident.id)

            passes = await session.execute(stmt)
            ws_perm.append([
                "ID", "–†–µ–∑–∏–¥–µ–Ω—Ç ID", "–§–ò–û —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", "–£—á–∞—Å—Ç–æ–∫",
                "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–ù–æ–º–µ—Ä", "–í–ª–∞–¥–µ–ª–µ—Ü", "–°—Ç–∞—Ç—É—Å"
            ])

            for pass_data in passes:
                pp = pass_data[0]
                ws_perm.append([
                    pp.id, pp.resident_id, pass_data[1], pass_data[2],
                    pp.car_brand, pp.car_model, pp.car_number,
                    pp.car_owner, pp.status
                ])

            # –õ–∏—Å—Ç: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞
            # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞)

            # –õ–∏—Å—Ç: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞
            ws_temp = wb.create_sheet("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞")
            headers = [
                "ID", "–¢–∏–ø –≤–ª–∞–¥–µ–ª—å—Ü–∞", "–§–ò–û", "–£—á–∞—Å—Ç–æ–∫/–ö–æ–º–ø–∞–Ω–∏—è", "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "–¢–∏–ø –¢–°", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–µ—Å–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª–∏–Ω—ã", "–ù–æ–º–µ—Ä –∞–≤—Ç–æ",
                "–ú–∞—Ä–∫–∞", "–ì—Ä—É–∑", "–¶–µ–ª—å", "–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞", "–°—Ç–∞—Ç—É—Å"
            ]
            ws_temp.append(headers)

            # –û—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–≤ –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
            # –î–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Ç–∏–ø–∞ "resident"
            res_stmt = select(
                TemporaryPass,
                Resident.fio,
                Resident.plot_number
            ).join(Resident, TemporaryPass.resident_id == Resident.id) \
                .where(TemporaryPass.owner_type == "resident")

            res_temp_passes = await session.execute(res_stmt)
            for tp_data in res_temp_passes:
                tp = tp_data[0]
                ws_temp.append([
                    tp.id,
                    "–†–µ–∑–∏–¥–µ–Ω—Ç",
                    tp_data[1],  # fio
                    tp_data[2],  # plot_number
                    "",  # –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    tp.vehicle_type,
                    tp.weight_category,
                    tp.length_category,
                    tp.car_number,
                    tp.car_brand,
                    tp.cargo_type,
                    tp.purpose,
                    tp.visit_date.strftime("%Y-%m-%d"),
                    tp.status
                ])

            # –î–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Ç–∏–ø–∞ "contractor"
            contr_stmt = select(
                TemporaryPass,
                Contractor.fio,
                Contractor.company,
                Contractor.position
            ).join(Contractor, TemporaryPass.contractor_id == Contractor.id) \
                .where(TemporaryPass.owner_type == "contractor")

            contr_temp_passes = await session.execute(contr_stmt)
            for tp_data in contr_temp_passes:
                tp = tp_data[0]
                ws_temp.append([
                    tp.id,
                    "–ü–æ–¥—Ä—è–¥—á–∏–∫",
                    tp_data[1],  # fio
                    tp_data[2],  # company
                    tp_data[3],  # position
                    tp.vehicle_type,
                    tp.weight_category,
                    tp.length_category,
                    tp.car_number,
                    tp.car_brand,
                    tp.cargo_type,
                    tp.purpose,
                    tp.visit_date.strftime("%Y-%m-%d"),
                    tp.status
                ])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = BytesIO()
            wb.save(buffer)
            buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                document=BufferedInputFile(buffer.read(), filename="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.xlsx"),
                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–æ–≤–∞
            await show_statistics(callback)
    except Exception as e:
        await bot.send_message(RAZRAB, f'{callback.from_user.id} - {str(e)}')
        await asyncio.sleep(0.05)